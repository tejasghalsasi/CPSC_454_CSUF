Virtualization is an important technology in datacenter environment due to its useful features such as server
consolidation, power saving, live migration and faster server provisioning. However, virtualization sometimes incurs some performance loss. There are many virtualization approaches including full virtualization and operating system-level virtualization. Different virtualization platforms differ in terms of features, performance and virtualization overhead. Thus, one platform can be more suitable to certain kind of application than another. Applications being virtualized also differ in resource usage. Web conferencing systems become popular as the clients' bandwidth has increased in last years, in educational, researching and business fields. The BigBlueButton is a web conferencing system that allows multiple users join a conference room, having classes and share their microphone, webcam, desktop and files. In this paper, we use KVM and OpenVZ as virtualization platforms to deploy conference systems using BigBlueButton. We explore its virtual performance under a realworld workload and a set of benchmarks that stress different aspects such as computing power, latency and memory, 1/0 and network bandwidth. These results can be a valuable information to be taken in account by systems administrators, for capacity planning and systems designing. Which, in turn, lead to cost savings for companies.

The well known procedure is hypervisor-based virtualization. Surely understood arrangements in light of hypervisor-based virtualization are: KVM and VMware. So as to utilize this sort of innovation there ought to be a virtual machine screen over the basic physical framework. Each virtual machine likewise has bolster for (disengaged) visitor working frameworks. It is very conceivable that one host working framework may bolster numerous visitor working frameworks inside this virtualization approach. 

Container based virtualization innovation speaks to another approach. In this model, the equipment assets are partitioned by actualizing many examples with (secure) separation properties . There is distinction between the two innovations. Here, visitor forms acquire deliberations quickly with container based advancements as they work through the virtualization layer straightforwardly at the working framework (OS) level. In hypervisor-based methodologies however there is normally one virtual machine for every visitor OS. One OS portion is commonly shared among virtual occurrences in container based arrangements. Along these lines, there is a presumption that the security of this sort of approach is weaker than with hypervisors. From a clients point of view, containers work as self-governing OSs, which seem ready to run autonomously of equipment and programming.
VMs can be grouped in Framework VMs, when are utilized to virtualize a whole OS, in resistance of Process VM, for example, those bolstered by the Java Virtual Machine. There are two types of VMMs, type I and II . A VMM type I, likewise called hypervisor or local, runs specifically over the exposed metal equipment in the most advantaged Ring, controls and offers assets to all VMs. The VMM type II keeps running as an application inside the OS, and is dealt with as a normal client space process. In the subsequent stage, we depict the virtualization methods to virtualize a whole OS. The present virtualization arrangements can make utilization of a significant number of virtualization methods above to achieve better execution. KVM and VMware make utilization of full virtualization, parallel interpretation and equipment help to virtualize any OS. These stages give paravirtualized drivers (VirtIO and VMware Tools,respectively) to permit their full virtualized visitor ass impart in a more straightforward manner with genuine equipment. These drivers are not CPU paravirtualization arrangements, they are insignificant, non-meddlesome changes introduced into the visitor OS that don't require OS kernel adjustment.
Full virtualization can virtualize any x86 working framework utilizing a mix of parallel interpretation and CPU coordinate execution methods. This approach makes an interpretation of bit code to supplant non-virtualizable guidelines with new successions of directions that have the expected impact on the virtual equipment. In the interim, client level code is specifically executed on the processor for superior virtualization. The VMM furnishes each VM with all administrations of the physical framework, including a virtual Profiles, virtual gadgets and virtualized memory administration. The visitor OS doesn't know it is being virtualized and requires no alteration. Full virtualization is the main choice that requires no equipment help or working framework help to virtualize touchy and advantaged guidelines. The VMM deciphers all working framework directions on the fly and stores the outcomes for sometime later, while client level guidelines run unmodified.

Parallel interpretation is a strategy utilized for the imitating of a processor design over another processor engineering. Accordingly, it permits executing unmodified visitor OS by copying one guideline set by another through interpretation of code. Not at all like unadulterated copying, paired interpretation is utilized to trap and imitate (or interpret) a little arrangement of the processor directions. That is, the code that necessities special execution, in Ring 0, for example, part mode. Whatever remains of the guidelines are executed straightforwardly by the host CPU

Hardware helped virtualization for the x86 design, was presented in 2006 when Intel VT-x and AMD-V augmentations were discharged. 
Hardware helped virtualization executes a Ring with a higher special mode in the processor engineering. These augmentations bolster permits executing unmodified visitor ass in Ring 0 (non-root mode) also, the hypervisor in Ring - 1 (root mode). 
Hardware helped virtualization improves CPUs to help virtualization without the need of paired interpretation or paravirtualization. The advantage is that this system lessens the overhead caused by the trap-and-copy display, rather than doing it in programming here it is done in Hardware.

Here, the host OS is a changed piece that permits the execution of numerous confined holders (CT), otherwise called Virtual Private Server (VPS) or correctional facility. 
Every CT is an occurrence that offers a similar bit of the host OS. 
A few cases that utilization this system are Linux-VServer, OpenVZ and Linux Containers. The physical server and single occasion of the working framework is virtualized into different secluded parcels, where each segment recreates a genuine server. The OS piece will run a solitary working framework and give that working framework usefulness to each of the parcels.